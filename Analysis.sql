-- Create tables and importing the data from csv files
CREATE TABLE PIZZA_DETAILS (
    PIZZA_ID TEXT PRIMARY KEY,
    PIZZA_TYPE_ID TEXT,
    SIZE TEXT,
    PRICE DECIMAL(10, 2)
);


COPY PIZZA_DETAILS (PIZZA_ID, PIZZA_TYPE_ID, SIZE, PRICE)
FROM
	'C:\Users\Syed\Desktop\AlmaLite\pizza_sales\pizzas.csv' DELIMITER ',' CSV HEADER;

-- ALTER TABLE PIZZA_DETAILS
-- ALTER COLUMN PIZZA_ID TYPE TEXT
-- ALTER TABLE PIZZA_DETAILS
-- ADD CONSTRAINT PK_PIZZA_ID PRIMARY KEY (PIZZA_ID);

SELECT
	*
FROM
	PIZZA_DETAILS;

SELECT PIZZA_ID FROM PIZZA_DETAILS ORDER BY PIZZA_ID;

CREATE TABLE PIZZA_TYPES (
	PIZZA_TYPE_ID TEXT,
	NAME TEXT,
	CATEGORY TEXT,
	INGREDIENTS TEXT
);

COPY PIZZA_TYPES (PIZZA_TYPE_ID, NAME, CATEGORY, INGREDIENTS)
FROM
	'C:\Users\Syed\Desktop\AlmaLite\pizza_sales\pizza_types.csv' DELIMITER ',' CSV HEADER;

SELECT
	*
FROM
	PIZZA_TYPES;

CREATE TABLE ORDERS (
	ORDER_ID INTEGER PRIMARY KEY,
	DATE DATE,
	TIME TIME
);

COPY ORDERS (ORDER_ID, DATE, TIME)
FROM
	'C:\Users\Syed\Desktop\AlmaLite\pizza_sales\orders.csv' DELIMITER ',' CSV HEADER;

SELECT
	*
FROM
	ORDERS;

CREATE TABLE ORDER_DETAILS (
	ORDER_DETAILS_ID INTEGER PRIMARY KEY,
	ORDER_ID INTEGER,
	PIZZA_ID TEXT,
	QUANTITY INTEGER,
	CONSTRAINT FK_ORDERS FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID),
	CONSTRAINT FK_PIZZA_DETAILS FOREIGN KEY(PIZZA_ID) REFERENCES PIZZA_DETAILS(PIZZA_ID)
);

COPY ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, PIZZA_ID, QUANTITY)
FROM
	'C:\Users\Syed\Desktop\AlmaLite\pizza_sales\order_details.csv' DELIMITER ',' CSV HEADER;

SELECT
	*
FROM
	ORDER_DETAILS;

-- ============************************=Performing Data Analysis on the Tables=========*********************==================*********
-- 1. Retrieve the total number of orders placed.
SELECT
	COUNT(ORDER_ID) AS TOTAL_NO_ORDERS_PLACED
FROM
	ORDERS;

-- 2. Calculate the total revenue generated from pizza sales.
SELECT
	SUM(PD.PRICE * OD.QUANTITY) AS TOTAL_REVENUE_GENERATED
FROM
	PIZZA_DETAILS PD
	JOIN ORDER_DETAILS OD ON PD.PIZZA_ID = OD.PIZZA_ID;
	
-- 3. Identify the highest-priced pizza.
SELECT
	MAX(PRICE) AS HIGHEST_PRICED_PIZZA
FROM
	PIZZA_DETAILS;

-- 4. Identify the most common pizza size ordered.
SELECT
	PD.SIZE AS PIZZA_SIZE,
	COUNT(PD.SIZE) AS MOST_COMMON_PIZZA_SIZE_ORDERED
FROM
	PIZZA_DETAILS PD
	JOIN ORDER_DETAILS OD ON PD.PIZZA_ID = OD.PIZZA_ID
GROUP BY
	PD.SIZE
ORDER BY
	MOST_COMMON_PIZZA_SIZE_ORDERED DESC
LIMIT
	1;

-- 5. List the top 5 most ordered pizza types along with their quantities.
SELECT
	PD.PIZZA_TYPE_ID AS PIZZA_TYPE,
	COUNT(PD.PIZZA_TYPE_ID) AS MOST_ORDERED_PIZZA,
	OD.QUANTITY AS QUANTITY
FROM
	PIZZA_DETAILS PD
	JOIN ORDER_DETAILS OD ON PD.PIZZA_ID = OD.PIZZA_ID
GROUP BY
	PD.PIZZA_TYPE_ID,
	OD.QUANTITY
ORDER BY
	MOST_ORDERED_PIZZA DESC
LIMIT
	5;

-- 6. Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT
	PT.CATEGORY AS PIZZA_CATEGORY,
	SUM(OD.QUANTITY) AS TOTAL_QUANTITY
FROM
	ORDER_DETAILS OD
	JOIN PIZZA_DETAILS PD ON OD.PIZZA_ID = PD.PIZZA_ID
	JOIN PIZZA_TYPES PT ON PT.PIZZA_TYPE_ID = PD.PIZZA_TYPE_ID
GROUP BY
	PT.CATEGORY
	
-- 7. Determine the distribution of orders by hour of the day.
SELECT
	COUNT(ORDER_ID) AS DISTRIBUTION_ORDERS,
	EXTRACT(
		HOUR
		FROM
			TIME
	) AS HOUR_OF_DAY
FROM
	ORDERS
GROUP BY
	HOUR_OF_DAY
ORDER BY
	HOUR_OF_DAY
	
-- 8. Join relevant tables to find the category-wise distribution of pizzas.
SELECT
	PT.CATEGORY,
	COUNT(PD.PIZZA_ID)
FROM
	PIZZA_DETAILS PD
	JOIN PIZZA_TYPES PT ON PD.PIZZA_TYPE_ID = PT.PIZZA_TYPE_ID
GROUP BY
	PT.CATEGORY
ORDER BY
	PT.CATEGORY
	
-- 9. Group the orders by date and calculate the average number of pizzas ordered per day.
WITH
	AVERAGEPIZZAS AS (
		SELECT
			DATE (DATE) AS DATE,
			ROUND(AVG(ORDER_ID), 2) AS AVERAGE_NO_OF_PIZZAS
		FROM
			ORDERS
		GROUP BY
			DATE
	)
SELECT
	*
FROM
	AVERAGEPIZZAS
GROUP BY
	DATE,
	AVERAGE_NO_OF_PIZZAS
ORDER BY
	DATE;

-- 10. Determine the top 3 most ordered pizza types based on revenue.
SELECT
	SUM(OD.QUANTITY * PD.PRICE) AS REVENUE,
	PT.PIZZA_TYPE_ID,
	COUNT(OD.ORDER_ID) AS MOST_ORDERED_PIZZA_TYPES
FROM
	ORDER_DETAILS OD
	JOIN PIZZA_DETAILS PD ON PD.PIZZA_ID = OD.PIZZA_ID
	JOIN PIZZA_TYPES PT ON PT.PIZZA_TYPE_ID = PD.PIZZA_TYPE_ID
GROUP BY
	PT.PIZZA_TYPE_ID
ORDER BY
	REVENUE DESC
LIMIT
	3;

-- 11. Calculate the percentage contribution of each pizza type to total revenue.
WITH
	REVENUEDATA AS (
		SELECT
			SUM(OD.QUANTITY * PD.PRICE) AS REVENUE,
			PT.PIZZA_TYPE_ID
		FROM
			PIZZA_DETAILS PD
			JOIN ORDER_DETAILS OD ON PD.PIZZA_ID = OD.PIZZA_ID
			JOIN PIZZA_TYPES PT ON PT.PIZZA_TYPE_ID = PD.PIZZA_TYPE_ID
		GROUP BY
			PT.PIZZA_TYPE_ID
	),
	TOTALREVENUE AS (
		SELECT
			SUM(REVENUE) AS TOTAL_REVENUE
		FROM
			REVENUEDATA
	)
SELECT
	PIZZA_TYPE_ID,
	REVENUE,
	ROUND((REVENUE / TOTAL_REVENUE) * 100, 2) AS PERCENT_CONTRIBUTION
FROM
	REVENUEDATA,
	TOTALREVENUE
ORDER BY
	REVENUE DESC
LIMIT
	3;

-- 12. Analyze the cumulative revenue generated over time.
SELECT
	DATE (DATE) AS DATE,
	SUM(SUM(OD.QUANTITY * PD.PRICE)) OVER (
		ORDER BY
			DATE (O.DATE)
	) AS CUMULATIVE_REVENUE
FROM
	PIZZA_DETAILS PD
	JOIN ORDER_DETAILS OD ON PD.PIZZA_ID = OD.PIZZA_ID
	JOIN ORDERS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY
	DATE (DATE)
ORDER BY
	DATE (DATE);

-- 13. Determine the top 3 most ordered pizza types based on revenue for each pizza category.and
-- Calculate the percentage contribution of each pizza type to total revenue.
WITH
	PIZZACATEGORY AS (
		SELECT
			PT.CATEGORY,
			COUNT(PT.PIZZA_TYPE_ID) AS MOST_ORDERED_PIZZA,
			SUM(OD.QUANTITY * PD.PRICE) AS REVENUE
		FROM
			ORDER_DETAILS OD
			JOIN PIZZA_DETAILS PD ON OD.PIZZA_ID = PD.PIZZA_ID
			JOIN PIZZA_TYPES PT ON PT.PIZZA_TYPE_ID = PD.PIZZA_TYPE_ID
		GROUP BY
			PT.CATEGORY
	),
	PIZZAREVENUE AS (
		SELECT
			SUM(REVENUE) AS TOT_REVENUE
		FROM
			PIZZACATEGORY
	)
SELECT
	CATEGORY,
	ROUND((REVENUE / TOT_REVENUE) * 100, 2) AS PERCENT_CONTRIBUTION
FROM
	PIZZACATEGORY,
	PIZZAREVENUE
ORDER BY
	TOT_REVENUE DESC
LIMIT
	3;

-- 14. Determine the top 3 most ordered pizza types based on revenue for each pizza category.
SELECT
	PT.CATEGORY,
	COUNT(PT.PIZZA_TYPE_ID) AS MOST_ORDERED_PIZZA_TYPES
FROM
	PIZZA_DETAILS PD
	JOIN ORDER_DETAILS OD ON PD.PIZZA_ID = OD.PIZZA_ID
	JOIN PIZZA_TYPES PT ON PT.PIZZA_TYPE_ID = PD.PIZZA_TYPE_ID
GROUP BY
	PT.CATEGORY
ORDER BY
	SUM(OD.QUANTITY * PD.PRICE) DESC
LIMIT
	3;

--15.  Average Pizzas Per Order
SELECT
	O.ORDER_ID, SUM(OD.QUANTITY) / COUNT(DISTINCT (O.ORDER_ID)) AS AVG_PIZZAS
FROM
	ORDER_DETAILS OD
	JOIN ORDERS O ON OD.ORDER_ID = O.ORDER_ID
	GROUP BY
	O.ORDER_ID;

--16. Daily Trend for Total Orders
SELECT
	EXTRACT(
		DAY
		FROM
			DATE
	) AS ORDER_DAY,
	COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS
FROM
	ORDERS
GROUP BY
	ORDER_DAY;
	
--17. Monthly Trend for Total Orders
SELECT
	EXTRACT(
		MONTH
		FROM
			DATE
	) AS ORDER_MONTH,
	COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS
FROM
	ORDERS
GROUP BY
	ORDER_MONTH;

--18. % of Sales by Pizza Category
SELECT
	PT.CATEGORY AS PIZZA_CATEGORY,
	SUM(PD.PRICE) AS TOTAL_PRICE,
	ROUND(
		(
			SUM(PD.PRICE) * 100 / (
				SELECT
					SUM(PRICE)
				FROM
					PIZZA_DETAILS
			)
		),
		2
	) || '%' AS PERCENT_SALES
FROM
	PIZZA_TYPES PT
	JOIN PIZZA_DETAILS PD ON PT.PIZZA_TYPE_ID = PD.PIZZA_TYPE_ID
GROUP BY
	PIZZA_CATEGORY;

--19. % of Sales by Pizza Size
SELECT
	SIZE AS PIZZA_SIZE,
	SUM(PRICE) AS TOTAL_PRICE,
	ROUND(
		(
			SUM(PRICE) * 100 / (
				SELECT
					SUM(PRICE)
				FROM
					PIZZA_DETAILS
			)
		),
		2
	) || '%' AS PERCENT_SALES FROM
	PIZZA_DETAILS PD
GROUP BY
	PIZZA_SIZE;

--20. Total Pizzas Sold by Pizza Category
SELECT
	PT.CATEGORY AS PIZZA_CATEGORY,
	COUNT(OD.PIZZA_ID) AS TOTAL_PIZZAS
FROM
	ORDER_DETAILS OD
	JOIN PIZZA_DETAILS PD ON OD.PIZZA_ID = PD.PIZZA_ID
	JOIN PIZZA_TYPES PT ON PD.PIZZA_TYPE_ID = PT.PIZZA_TYPE_ID
GROUP BY
	PIZZA_CATEGORY;

-- 21. Average Order Value
SELECT
	ROUND((SUM(PD.PRICE) / COUNT(DISTINCT OD.ORDER_ID)), 2) AS AVERAGE_ORDER_VALUE
FROM
	PIZZA_DETAILS PD
	JOIN ORDER_DETAILS OD ON PD.PIZZA_ID = OD.PIZZA_ID;